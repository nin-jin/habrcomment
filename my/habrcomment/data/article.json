{"id":"423889","timePublished":"2018-09-20T11:46:02+00:00","isCorporative":false,"lang":"ru","titleHtml":"Моё разочарование в софте","leadData":{"textHtml":"<a href=\"https://xkcd.com/2021/\"><div style=\"text-align:center;\"><img src=\"https://imgs.xkcd.com/comics/software_development.png\" /></div></a><br/>\r\n<i><font color=\"gray\"><b>Суть разработки программного обеспечения</b><br/>\r\n— Нужно проделать 500 отверстий в стене, так что я сконструировал автоматическую дрель. В ней используются элегантные точные шестерни для непрерывной регулировки скорости и крутящего момента по мере необходимости.<br/>\r\n— Отлично, у неё идеальный вес. Загрузим 500 таких дрелей в пушку, которые мы сделали, и выстрелим в стену.</font></i><br/>\r\n<br/>\r\nЯ занимаюсь программированием уже 15 лет. Но в последнее время при разработке не принято думать об эффективности, простоте и совершенстве: вплоть до того, что мне становится грустно за свою карьеру и за IT-отрасль в целом.<br/>\r\n<br/>\r\nДля примера, современные автомобили работают, скажем, на 98% от того, что физически позволяет нынешняя конструкция двигателя. Современная архитектура использует точно рассчитанное количество материала, чтобы выполнять свою функцию и оставаться в безопасности в данных условиях. Все самолёты сошлись к оптимальному размеру/форме/нагрузке и в основном выглядят одинаково.<br/>\r\n<br/>\r\nТолько в программном обеспечении считается нормальным, если программа работает на уровне 1% или даже 0,01% от возможной производительности. Ни у кого вроде нет возражений.","imageUrl":null,"buttonTextHtml":null,"image":null},"editorVersion":"1.0","postType":"article","postLabels":[{"type":"translation","data":{"originalAuthorName":"Nikita Prokopov","originalUrl":"http://tonsky.me/blog/disenchantment/"}}],"author":{"scoreStats":{"score":1221.5,"votesCount":1493},"rating":0,"relatedData":{"vote":{"value":null},"canVote":true,"isSubscribed":false},"contacts":[],"authorContacts":[],"paymentDetails":{"paymentYandexMoney":null,"paymentPayPalMe":null,"paymentWebmoney":null},"id":"1371978","alias":"m1rko","fullname":"Анатолий Ализар","avatarUrl":"//habrastorage.org/getpro/habr/avatars/4ec/bd0/85d/4ecbd085d692835a931d03174ff19539.png","speciality":"автор, переводчик, редактор"},"statistics":{"commentsCount":2475,"favoritesCount":1108,"readingCount":356713,"score":443,"votesCount":505},"hubs":[{"relatedData":{"isSubscribed":false},"id":"17107","alias":"android_dev","type":"collective","title":"Разработка под Android","titleHtml":"Разработка под Android","isProfiled":true},{"relatedData":{"isSubscribed":false},"id":"19727","alias":"linux_dev","type":"collective","title":"Разработка под Linux","titleHtml":"Разработка под Linux","isProfiled":true},{"relatedData":{"isSubscribed":false},"id":"21456","alias":"win_dev","type":"collective","title":"Разработка под Windows","titleHtml":"Разработка под Windows","isProfiled":true},{"relatedData":{"isSubscribed":false},"id":"21918","alias":"soft","type":"collective","title":"Софт","titleHtml":"Софт","isProfiled":false}],"flows":[{"id":"1","alias":"develop","title":"Разработка"},{"id":"7","alias":"popsci","title":"Научпоп"}],"relatedData":{"unreadCommentsCount":0,"vote":{"value":null,"voteTimeExpired":"2018-10-20T11:46:02+00:00"},"bookmarked":false,"canComment":true,"canEdit":false,"canVote":false,"canViewVotes":false,"canModerateComments":false,"trackerSubscribed":false,"emailSubscribed":false},"textHtml":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><a href=\"https://xkcd.com/2021/\"><div style=\"text-align:center;\"><img src=\"/img/image-loader.svg\" data-src=\"https://imgs.xkcd.com/comics/software_development.png\"/></div></a><br/>\r\n<i><font color=\"gray\"><b>Суть разработки программного обеспечения</b><br/>\r\n— Нужно проделать 500 отверстий в стене, так что я сконструировал автоматическую дрель. В ней используются элегантные точные шестерни для непрерывной регулировки скорости и крутящего момента по мере необходимости.<br/>\r\n— Отлично, у неё идеальный вес. Загрузим 500 таких дрелей в пушку, которые мы сделали, и выстрелим в стену.</font></i><br/>\r\n<br/>\r\nЯ занимаюсь программированием уже 15 лет. Но в последнее время при разработке не принято думать об эффективности, простоте и совершенстве: вплоть до того, что мне становится грустно за свою карьеру и за IT-отрасль в целом.<br/>\r\n<br/>\r\nДля примера, современные автомобили работают, скажем, на 98% от того, что физически позволяет нынешняя конструкция двигателя. Современная архитектура использует точно рассчитанное количество материала, чтобы выполнять свою функцию и оставаться в безопасности в данных условиях. Все самолёты сошлись к оптимальному размеру/форме/нагрузке и в основном выглядят одинаково.<br/>\r\n<br/>\r\nТолько в программном обеспечении считается нормальным, если программа работает на уровне 1% или даже 0,01% от возможной производительности. Ни у кого вроде нет возражений.<a name=\"habracut\"></a> Люди даже гордятся, насколько неэффективно работает программа, типа «зачем беспокоиться, компьютеры достаточно быстрые»:<br/>\r\n<br/>\r\n<blockquote><a href=\"https://twitter.com/tveastman/status/1039002300600147968\">@tveastman</a>: Я каждый день запускаю программу на Python, она выполняется за 1,5 секунды. Я потратил шесть часов и переписал её на Rust, теперь она выполняется за 0,06 секунды. Это ускорение означает, что моё время окупится через 41 год, 24 дня :-)</blockquote><br/>\r\nНаверное, вы слышали такую мантру: «Время программиста дороже времени компьютера». Это означает, что мы тратим компьютерное время в беспрецедентных масштабах. Вы бы купили машину с расходом 100 литров на 100 километров? Как насчёт 1000 литров? С компьютерами такое происходит постоянно.<br/>\r\n<br/>\r\n<h1>Всё невыносимо медленно</h1><br/>\r\nОглянитесь вокруг: портативные компьютеры в тысячи раз мощнее тех, что привели человека на Луну. Тем не менее, каждый второй сайт не может обеспечить плавную прокрутку страницы на 60 FPS на последнем топовом MacBook Pro. Я могу комфортно играть в игры, смотреть видео 4K, но не прокручивать веб-страницы! Это нормально?<br/>\r\n<br/>\r\nПочтовому приложению Google Inbox в браузере Chrome от той же Google, <a href=\"https://twitter.com/nikitonsky/statuses/968882438024941568\">требуется 13 секунд, чтобы открыть письмо среднего размера</a>:<br/>\r\n<br/>\r\n<div class=\"oembed\"><blockquote class=\"twitter-tweet\" data-lang=\"en_US\"><p lang=\"en\" dir=\"ltr\">This is, in real time, how long it takes for Google Inbox running in Google Browser to open an email. Not the shortest one, but still, it’s just text and pictures! Go Web Stack go! <a href=\"https://t.co/CvqsFiIUuc\">pic.twitter.com/CvqsFiIUuc</a></p>— Nikita (@nikitonsky) <a href=\"https://twitter.com/nikitonsky/status/968882438024941568?ref_src=twsrc%5Etfw\">February 28, 2018</a></blockquote>\n<script async=\"async\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div><br/>\r\nОн ещё анимирует пустые белые формы вместо того, чтобы показать их содержимое, потому что это единственный способ анимировать что-то на веб-странице с приличной производительностью. Нет, не 60 FPS, а скорее «настолько быстро, насколько возможно на этой странице». С нетерпением жду, что же веб-сообщество предложит, когда дисплеи 120 Гц станут мейнстримом. Они еле справляются с 60 Гц.<br/>\r\n<br/>\r\nОбновление Windows 10 <a href=\"https://grumpy.website/post/0PeXr1S7N\">занимает 30 минут</a>. Что можно делать так долго? Этого времени достаточно, чтобы полностью отформатировать мой SSD-накопитель, загрузить свежий билд и установить его примерно 5 раз подряд.<br/>\r\n<br/>\r\n<img src=\"/img/image-loader.svg\" data-src=\"http://tonsky.me/blog/disenchantment/windows_update.gif\"/><br/>\r\n<br/>\r\n<blockquote><a href=\"https://pavelfatin.com/typing-with-pleasure/\">Павел Фатин</a>: Набор текста в редакторе — относительно простой процесс, поэтому даже 286 могли обеспечить довольно плавный процесс набора.</blockquote><br/>\r\nВ современных текстовых редакторах задержка при наборе больше, чем в 42-летнем Emacs. Текстовые редакторы! Что может быть проще? На каждое нажатие клавиши, нужно всего лишь обновить крошечную прямоугольную область на экране, а современные текстовые редакторы не могут сделать это за 16 мс. А это много времени. МНОГО. 3D-игра заполняет экран сотнями тысяч (!!!) полигонов за те же 16 мс, а также обрабатывает ввод, пересчитывает мир и динамически загружает/выгружает ресурсы. Как так?<br/>\r\n<br/>\r\nТенденция такова, что софт вовсе не становится быстрее и функциональнее. Мы получаем более быстрое оборудование, на котором софт с теми же функциями ворочается медленнее, чем раньше. Всё работает намного медленнее максимальной скорости. Никогда не задумывались, почему ваш телефон загружается от 30 до 60 секунд? Почему он не может загрузиться, скажем, за одну секунду? Здесь нет никаких физических ограничений. Лично мне бы такое понравилось. Хочется, чтобы разработчики достигли предела, используя каждый бит для производительности.<br/>\r\n<br/>\r\n<h1>Всё ОГРОМНОЕ</h1><br/>\r\nИ ещё это раздутие. Веб-приложения могут открываться в десять раз быстрее, если просто заблокировать рекламу. Google умоляет всех прекратить тормоза с помощью инициативы AMP — технического решения, для которого не нужны какие-либо технологии, просто немного здравого смысла. Если удалить раздувание, интернет станет работать на сумасшедшей скорости. Неужели это сложно понять?<br/>\r\n<br/>\r\nСистема Android без приложений <a href=\"https://grumpy.website/post/0Oz1lDOq5\">занимает почти 6 ГБ</a>. Просто задумайтесь на секунду, насколько неприлично огромное это число. Что там, фильмы в HD-качестве? Думаю, в основном код: ядро, драйверы. Ещё какие-то ресурсы, конечно, но они не могут быть такими большими. Сколько же драйверов вам нужно для телефона?<br/>\r\n<br/>\r\n<img src=\"http://tonsky.me/blog/disenchantment/android_storage.jpg\" data-src=\"http://tonsky.me/blog/disenchantment/android_storage.jpg\" data-blurred=\"true\"/><br/>\r\n<br/>\r\nWindows 95 занимала 30 МБ. Сегодня у нас есть веб-страницы тяжелее, чем эта ОС! Windows 10 уже 4 ГБ, то есть в 133 раза больше. Но разве она в 133 раза лучше? Я имею в виду, функционально они практически одинаковы. Да, у нас появилась Кортана, но я сомневаюсь, что она весит 3970 МБ. Но это Windows 10, неужели Android должен быть ещё в полтора раза больше?<br/>\r\n<br/>\r\nПриложение клавиатуры Google как ни в чём не бывало съедает 150 МБ. Эта программа рисует 30 клавиш на экране — она правда в пять раз сложнее, чем вся Windows 95? Приложение Google app, в основном, просто пакет для Google Web Search, занимает 350 МБ! Сервисы Google Play, которыми я не пользуюсь (я не покупаю там книги, музыку или видео) — 300 МБ, которые просто сидят здесь и которые нельзя удалить.<br/>\r\n<br/>\r\n<img src=\"/img/image-loader.svg\" data-src=\"http://tonsky.me/blog/disenchantment/apps_storage.gif\"/><br/>\r\n<br/>\r\nПосле установки всех необходимых приложений (социальные сети, чаты, карты, такси, банки и т. д.) на телефоне остался всего 1 гигабайт для фотографий. И это вообще без игр и музыки! Помните времена, когда ОС, приложения и все ваши данные помещались на дискету?<br/>\r\n<br/>\r\nВаша программа для заметок наверняка написана в Electron и, таким образом, <a href=\"https://josephg.com/blog/electron-is-flash-for-the-desktop/\">поставляется с драйвером для контроллера Xbox 360</a>, умеет показывать 3D-графику, воспроизводить аудио и фотографировать с помощью веб-камеры.<br/>\r\n<br/>\r\n<img src=\"http://tonsky.me/blog/disenchantment/slack_memory.jpg\" data-src=\"http://tonsky.me/blog/disenchantment/slack_memory.jpg\" data-blurred=\"true\"/><br/>\r\n<br/>\r\nПростой текстовый чат всегда славился скоростью и малым потреблением памяти. Так что Slack — это пример очень ресурсоёмкого приложения. Я имею в виду, что чат и текстовый редактор — это самые базовые вещи, они должны потреблять меньше всего ресурсов. Добро пожаловать в 2018 год.<br/>\r\n<br/>\r\nВы можете сказать, что они хотя бы работают. Но увеличение размера — не значит улучшение. Это значит, что кто-то потерял контроль. Мы больше не знаем, что происходит. Увеличение размера — это повышение сложности, снижение производительности и надёжности. Это ненормально и не должно считаться нормой. На раздутый размер нужно сразу обращать внимание — и держаться от них подальше.<br/>\r\n<br/>\r\n<h1>Всё гниёт</h1><br/>\r\nAndroid-телефон на 16 ГБ был прекрасен три года назад. Сегодня под Android 8.1 он еле работает, потому что каждое приложение увеличилось минимум вдвое без видимых причин. Дополнительных функций нет. Они не стали быстрее и внешний вид не изменился. Они просто… раздулись?<br/>\r\n<br/>\r\niPhone 4s вышел с iOS 5, но едва может работать под управлением iOS 9. И это не потому, что iOS 9 намного лучше — в основном, система не изменилась. Но новое оборудование быстрее, поэтому они сделали программное обеспечение медленнее. Не волнуйтесь — вы получили захватывающие новые возможности, например… работа тех же приложений с той же скоростью! Не знаю.<br/>\r\n<br/>\r\niOS 11 прекратила поддержку 32-разрядных приложений. Это значит, что если разработчик не готов вернуться и обновить приложение, скорее всего, вы не увидите снова эту отличную программу.<br/>\r\n<br/>\r\n<blockquote><a href=\"https://twitter.com/jckarter/statuses/1017071794245623808\">@jckarter</a>: Программу DOS можно заставить работать без изменений практически на любом компьютере, сделанном после 80-х годов. Приложение JavaScript может прекратить работу из-за завтрашнего обновления Chrome.</blockquote><br/>\r\nСегодняшние веб-страницы <a href=\"http://tonsky.me/blog/chrome-intervention/\">не будут работать в любом браузере через 10 лет</a> (а может и раньше).<br/>\r\n<br/>\r\n«Нужно бежать со всех ног, чтобы только остаться на том же месте». Но смысл? Я могу постоянно покупать новые телефоны и ноутбуки, как все, но делать это лишь ради того, чтобы иметь возможность запускать все те же приложения, которые стали только медленнее?<br/>\r\n<br/>\r\nДумаю, что мы можем и должны исправить ситуацию. Сейчас все разрабатывают программы для сегодняшнего дня, изредка для завтрашнего. Но будет неплохо делать вещи, которые работают немного дольше.<br/>\r\n<br/>\r\n<h1>Хуже — значит лучше</h1><br/>\r\nСейчас никто ничего не понимает. И не хочет понимать. Мы просто выпускаем полусырую ерунду, надеемся на лучшее и называем это «здравым смыслом для стартапа».<br/>\r\n<br/>\r\nВеб-страницы просят обновиться, если что-то пошло не так. У кого есть время, чтобы найти причину неполадки?<br/>\r\n<br/>\r\n<img src=\"http://tonsky.me/blog/disenchantment/reload.jpg\" data-src=\"http://tonsky.me/blog/disenchantment/reload.jpg\" data-blurred=\"true\"/><br/>\r\n<br/>\r\nЛюбое веб-приложение выдаёт постоянный поток «случайных» ошибок JS, даже на совместимых браузерах.<br/>\r\n<br/>\r\nВся архитектура баз данных веб/SQL построена на предпосылке (даже надежде), что никто не изменит данные, пока вы смотрите на открытую веб-страницу.<br/>\r\n<br/>\r\nБольшинство приложений для совместной работы сделали «как смогли», там масса типичных сценариев, когда они теряют данные. Видели диалог «Какую версию сохранить?» Сегодня планка так низка, что пользователи рады даже этому вопросу.<br/>\r\n<br/>\r\n<img src=\"http://tonsky.me/blog/disenchantment/icloud_conflict.jpg\" data-src=\"http://tonsky.me/blog/disenchantment/icloud_conflict.jpg\" data-blurred=\"true\"/><br/>\r\n<br/>\r\nИ нет, в моём мире не является нормальным приложение, которое говорит: «Я уничтожу часть твоей работы, только выбери какую».<br/>\r\n<br/>\r\nLinux <i>намеренно</i> убивает случайные процессы. И всё же это самая популярная серверная ОС.<br/>\r\n<br/>\r\nУ меня каждое устройство регулярно выходит из строя так или иначе. Время от времени монитор Dell нужно аппаратно перезагружать, потому что в нём есть софт. AirDrop? Вам повезёт, если он обнаружит устройство, иначе что делать? Bluetooth? Спецификации настолько сложны, что <a href=\"https://thewirecutter.com/blog/understanding-bluetooth-pairing-problems/\">устройства не будут устанавливать связь друг с другом</a>, а <a href=\"http://time.com/4358533/bluetooth-fix-how/\">периодические перезагрузки — оптимальный вариант</a>.<br/>\r\n<br/>\r\n<img src=\"http://tonsky.me/blog/disenchantment/plz_connect.jpg\" data-src=\"http://tonsky.me/blog/disenchantment/plz_connect.jpg\" data-blurred=\"true\"/><br/>\r\n<br/>\r\nИ я даже не упоминаю об <a href=\"https://twitter.com/internetofshit\">Интернете вещей</a>. Это настолько за гранью разумного, что даже нечего добавить.<br/>\r\n<br/>\r\nЯ хочу гордиться своей работой. Я хочу делать рабочие, стабильные вещи. Для этого нужно понять, что конкретно мы разрабатываем, внутри и снаружи, а это невозможно сделать в раздутых, чрезмерно усложнённых системах.<br/>\r\n<br/>\r\n<h1>В программировании такой же хаос</h1><br/>\r\nКажется, что никто больше не заинтересован в качественных, быстрых, эффективных, долговечных, основательных решениях. Даже если давно известны эффективные решения, мы по-прежнему боремся с теми же проблемами: управление пакетами, системы сборки, компиляторы, конструкция языка, IDE.<br/>\r\n<br/>\r\nСистемы сборки по своей сути ненадёжны и периодически требуют полной очистки, хотя у них есть вся информация для инвалидации. Ничто не мешает сделать процесс сборки надёжным, предсказуемым и на 100% воспроизводимым. Просто никто не думает, что это важно. NPM уже много лет находится в состоянии «иногда работает».<br/>\r\n<br/>\r\n<blockquote><a href=\"https://twitter.com/przemyslawdabek/status/940547268729606145\">@przemyslawdabek:</a> Кажется, что <code>rm-rf node_modules</code> является неотъемлемой частью рабочего процесса в проектах Node.js/JavaScript.</blockquote><br/>\r\nА время сборки? Никто не считает проблемой, что компилятор работает минуты или даже часы. А как же «время программиста дороже»? Почти все компиляторы, пре- и постпроцессоры значительно, иногда катастрофически увеличивают время сборки, не обеспечивая пропорционально существенных преимуществ.<br/>\r\n<br/>\r\n<a href=\"https://xkcd.ru/303/\"><img src=\"/img/image-loader.svg\" data-src=\"https://xkcd.ru/i/303_v2.png\"/></a><br/>\r\n<br/>\r\nВы ожидаете, что программисты будут принимать в основном рациональные решения, но иногда они делают прямо противоположное. Например, выбирая Hadoop <a href=\"https://www.chrisstucchio.com/blog/2013/hadoop_hatred.html\">даже если он медленнее, чем выполнение той же задачи на одном десктопном компьютере</a>.<br/>\r\n<br/>\r\nМашинное обучение и ИИ отбросили программное обеспечение к гаданию на кофейной гуще во времена, когда большинство компьютеров даже не были достаточно надёжными.<br/>\r\n<br/>\r\n<blockquote><a href=\"https://twitter.com/freetonik/status/1039826129190875136\">@rakhim</a>: Когда приложение или сервис говорит «под управлением ИИ» или «на основе машинного обучения», я читаю это как «ненадёжное, непредсказуемое поведение, которое не поддаётся объяснению». Я держусь подальше от «ИИ», потому что хочу от компьютеров противоположного: надёжности, предсказуемости и логики.</blockquote><br/>\r\nМы засунули виртуальные машины в Linux, а затем засунули Docker в виртуальные машины, просто потому что никто не смог разобраться с бардаком, который производят большинство программ, языков и их окружений. Мы накрываем дерьмо одеялами, чтобы не убирать его. Например, «единый бинарник» остаётся ОГРОМНЫМ преимуществом Go. Нет бардака == успех.<br/>\r\n<br/>\r\n<a href=\"https://xkcd.com/1987/\"><img src=\"/img/image-loader.svg\" data-src=\"https://imgs.xkcd.com/comics/python_environment.png\"/></a><br/>\r\n<i><font color=\"gray\">Окружающая среда Python настолько загрязнилась, что мой ноутбук объявили зоной экологической катастрофы.<br/>\r\nПримечание. Агентство по защите окружающей среды Python хотело залить его цементом и захоронить с картинкой на входе — предупреждением для будущих цивилизаций об опасности использовать sudo для установки случайных пакетов</font></i> <br/>\r\n<br/>\r\nА зависимости? Люди бездумно ставят переусложнённые «полные пакеты» для простейших проблем, не думая о последствиях. Из этих зависимостей растут новые. В конечном итоге вы получаете дерево, которое является чем-то средним между фильмом ужасов (огромное и полное конфликтов) и комедией (нет причин, по которым мы добавили сюда эти пакеты, <a href=\"https://medium.com/@jdan/i-peeked-into-my-node-modules-directory-and-you-wont-believe-what-happened-next-b89f63d21558\">но вот они</a>):<br/>\r\n<br/>\r\n<a href=\"http://tonsky.me/blog/disenchantment/dependencies.gif\"><img src=\"/img/image-loader.svg\" data-src=\"http://tonsky.me/blog/disenchantment/dependencies.gif\"/></a><br/>\r\n<br/>\r\nПрограммы не могут работать несколько лет без перезагрузки. Иногда <a href=\"https://docs.gitlab.com/ee/administration/operations/unicorn.html#unicorn-worker-killer\">даже несколько дней — это слишком</a>. Происходят случайные глюки, и никто не знает почему.<br/>\r\n<br/>\r\nЧто ещё хуже, ни у кого нет времени остановиться и выяснить, что произошло. Зачем беспокоиться, если всегда есть другой выход. Поднять новый инстанс AWS. Перезапустить процесс. Удалить и восстановить базу данных. Написать скрипт, который будет перезапускать ваше сломанное приложение каждые 20 минут. Включить одни и те же ресурсы несколько раз: <a href=\"https://blog.timac.org/2017/0410-analysis-of-the-facebook-app-for-ios-v-87-0/\">тяп-ляп — и в продакшн</a>. Двигайся быстро, не трать время на исправление ошибок.<br/>\r\n<br/>\r\nЭто не инженерная работа. Это просто ленивое программирование. Инженерная работа предполагает глубокое понимание производительности, структуры и ограничений того, что вы создаёте. Лепить халтуру из некачественного материала — совершенно противоположное занятие. Чтобы развиваться, мы должны понимать, что и зачем мы делаем.<br/>\r\n<br/>\r\n<h1>Мы застряли</h1><br/>\r\nТаким образом, всё это просто куча едва работающего кода, добавленного поверх ранее написанного едва работающего кода. Он продолжает расти в размерах и сложности, уменьшая шансы на изменения.<br/>\r\n<br/>\r\nЧтобы иметь здоровую экосистему, <i>необходимо</i> вернуться. <i>Необходимо</i> иногда выбрасывать хлам и заменять его лучшими альтернативами.<br/>\r\n<br/>\r\n<img src=\"http://tonsky.me/blog/disenchantment/design_process.jpg\" data-src=\"http://tonsky.me/blog/disenchantment/design_process.jpg\" data-blurred=\"true\"/><br/>\r\n<br/>\r\nНо у кого есть на это время? Новые ядра ОС не выходили сколько, 25 лет? Это сейчас стало слишком сложным, чтобы просто взять и переписать. В браузерах накопилось столько пограничных ситуаций и исторических прецедентов, что никто не осмелится писать движок с нуля.<br/>\r\n<br/>\r\nСегодняшнее определение прогресса — или подбросить топлива:<br/>\r\n<br/>\r\n<blockquote><a href=\"https://twitter.com/sahrizv/status/1018184792611827712\">@sahrizv</a>: 2014 — нужно внедрить микросервисы для решения проблем с монолитами.<br/>\r\n2016 — нужно внедрить Docker, чтобы решить проблемы с микросервисами.<br/>\r\n2018 — нужно внедрить Kubernetes, чтобы решить проблемы с Docker.</blockquote><br/>\r\nили изобретать велосипед:<br/>\r\n<br/>\r\n<blockquote><a href=\"https://twitter.com/dr_c0d3/status/1040092903052378112\">@dr_c0d3</a>: 2000: напишите 100 строк XML, чтобы «декларативно» настроить сервлеты и EJB.<br/>\r\n2018: напишите 100 строк YAML, чтобы «декларативно» настроить микросервисы.<br/>\r\nВ XML были хотя бы схемы…</blockquote><br/>\r\nМы застряли, и никто нас не спасёт.<br/>\r\n<br/>\r\n<h1>Бизнесу всё равно</h1><br/>\r\nПользователям тоже. Они выучились принимать то, что мы делаем. Мы (инженеры) говорим, что каждое приложение для Android занимает 350 МБ? Хорошо, они будут с этим жить. Мы говорим, что не можем обеспечить плавную прокрутку? Окей, они свыкнутся с телефоном, который подтормаживает. Мы говорим: «Если не работает, перезагрузитесь»? Они перезагрузятся. Ведь у них нет выбора.<br/>\r\n<br/>\r\nКонкуренции тоже нет. Все строят одни и те же медленные, раздутые, ненадёжные продукты. Случайный скачок вперёд по качеству даёт конкурентное преимущество (iPhone/iOS против других смартфонов, Chrome против других браузеров) и заставляет всех перегруппироваться, но ненадолго.<br/>\r\n<br/>\r\nНаша миссия как инженеров — показать миру потрясающие возможности современных компьютеров с точки зрения производительности, надёжности, качества и удобства использования. Если нам не всё равно, люди потянутся. И никто кроме нас не покажет им, что такое возможно. Если только нам не наплевать.<br/>\r\n<br/>\r\n<h1>Не всё так плохо</h1><br/>\r\nИногда на пасмурном небосводе просвечивают лучики надежды.<br/>\r\n<br/>\r\nРабота <a href=\"https://twitter.com/mjpt777\">Мартина Томпсона</a> (<a href=\"https://github.com/LMAX-Exchange/disruptor\">LMAX Disruptor</a>, <a href=\"https://github.com/real-logic/simple-binary-encoding\">SBE</a>, <a href=\"https://github.com/real-logic/aeron\">Aeron</a>) впечатляет, она освежающе проста и эффективна.<br/>\r\n<br/>\r\n<a href=\"https://github.com/google/xi-editor\">Редактор Xi</a> Рафа Левиена, кажется, построен на правильных принципах.<br/>\r\n<br/>\r\n<a href=\"https://www.youtube.com/user/jblow888\">Джонатан Блоу</a> для своей игры разработал язык компилирования, который компилирует 500 000 строк в секунду на ноутбуке. Это холодная компиляция, никакого промежуточного кэширования, никаких инкрементальных билдов.<br/>\r\n<br/>\r\nНе нужно быть гением, чтобы писать быстрые программы. Здесь нет какой-то магии. Единственное, что требуется, — это не строить софт на базе огромной кучи дерьма, которую поставляют современные инструменты.<br/>\r\n<br/>\r\n<h1>Манифест лучшего мира</h1><br/>\r\nЯ хочу видеть прогресс. Я хочу перемен. Чтобы современное программное обеспечение совершенствовалось, а не стояло на месте. Я не желаю заново изобретать одно и то же, каждый раз выпуская всё более медленный и раздутый продукт. Я хочу во что-то верить — в достойную цель, в будущее, которое лучше, чем то, что мы имеем сегодня, и чтобы появилось сообщество инженеров, которые разделяют это видение.<br/>\r\n<br/>\r\nЧто мы имеем сегодня — это не прогресс. Мы едва достигаем бизнес-целей с этими плохими инструментами. Мы застряли в локальном оптимуме, и никто не хочет двигаться. Это даже не хорошее место, оно раздутое и неэффективное. Мы просто как-то привыкли к нему.<br/>\r\n<br/>\r\nПоэтому я хочу заявить: <b>нынешняя ситуация — полное дерьмо</b>. Как инженеры, мы можем и должны, и сделаем лучше. У нас могут быть лучшие инструменты, мы можем создавать лучшие приложения, более быстрые, предсказуемые, более надёжные, использующие меньше ресурсов (на порядки меньше!). Мы должны глубоко понять, что мы делаем и почему. Мы должны выпускать продукты надёжно, предсказуемо, с самым высоким качеством. Мы можем и должны гордиться нашей работой. Не просто «учитывая то, что у нас было...» — никаких оговорок!<br/>\r\n<br/>\r\nНадеюсь, я не одинок. Надеюсь, что есть люди, которые хотят того же. Я буду рад, если мы хотя бы начнём говорить о том, насколько абсурдно нелепа нынешняя ситуация в индустрии программного обеспечения. А потом, возможно, придумаем, как выбраться из неё.</div>","tags":[{"titleHtml":"индустрия ПО"},{"titleHtml":"прогресс"},{"titleHtml":"ожирение софта"}],"metadata":{"stylesUrls":[],"scriptUrls":[],"shareImageUrl":"https://habr.com/share/publication/423889/3cd70cd88cbdd1e409bab5a1a08d5043/","shareImageWidth":1200,"shareImageHeight":630,"vkShareImageUrl":"https://habr.com/share/publication/423889/3cd70cd88cbdd1e409bab5a1a08d5043/?format=vk","schemaJsonLd":"{\"@context\":\"http:\\/\\/schema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https:\\/\\/habr.com\\/ru\\/post\\/423889\\/\"},\"headline\":\"Моё разочарование в софте\",\"datePublished\":\"2018-09-20T14:46:02+03:00\",\"dateModified\":\"2018-09-21T17:16:46+03:00\",\"author\":{\"@type\":\"Person\",\"name\":\"Анатолий Ализар\"},\"publisher\":{\"@type\":\"Organization\",\"name\":\"Habr\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https:\\/\\/habrastorage.org\\/webt\\/a_\\/lk\\/9m\\/a_lk9mjkccjox-zccjrpfolmkmq.png\"}},\"description\":\"Суть разработки программного обеспечения &mdash; Нужно проделать 500 отверстий в стене, так что я сконструировал автоматическую дрель. В ней используются элегантные т...\",\"url\":\"https:\\/\\/habr.com\\/ru\\/post\\/423889\\/#post-content-body\",\"about\":[\"h_android_dev\",\"h_linux_dev\",\"h_win_dev\",\"h_soft\",\"f_develop\",\"f_popsci\"],\"image\":[\"https:\\/\\/habrastorage.org\\/getpro\\/habr\\/post_images\\/4c8\\/46e\\/d60\\/4c846ed603ae9d952935d53def423386.png\",\"https:\\/\\/habrastorage.org\\/getpro\\/habr\\/post_images\\/cf3\\/c23\\/be8\\/cf3c23be8d3562023a0eccbe9765dc7f.gif\",\"https:\\/\\/habrastorage.org\\/getpro\\/habr\\/post_images\\/6a3\\/637\\/792\\/6a36377926d98ae797d58a6c4cceff4e.jpg\",\"https:\\/\\/habrastorage.org\\/getpro\\/habr\\/post_images\\/ddd\\/12f\\/4f7\\/ddd12f4f7aad903f421e6728675fa465.gif\",\"https:\\/\\/habrastorage.org\\/getpro\\/habr\\/post_images\\/a3e\\/610\\/5f0\\/a3e6105f0567c22704a1b725a6b974ce.jpg\",\"https:\\/\\/habrastorage.org\\/getpro\\/habr\\/post_images\\/188\\/446\\/b03\\/188446b03d1699c2035a234548d552da.jpg\",\"https:\\/\\/habrastorage.org\\/getpro\\/habr\\/post_images\\/04e\\/f5b\\/57d\\/04ef5b57d77c8eacd33b613875015037.jpg\",\"https:\\/\\/habrastorage.org\\/getpro\\/habr\\/post_images\\/bfd\\/411\\/394\\/bfd41139404635b9c1fa3cc6fccfe5b4.jpg\",\"https:\\/\\/habrastorage.org\\/getpro\\/habr\\/post_images\\/d8b\\/e82\\/7f8\\/d8be827f80da2625c683f85d6b4e93ec.png\",\"https:\\/\\/habrastorage.org\\/getpro\\/habr\\/post_images\\/987\\/ac3\\/b9e\\/987ac3b9eb5d2ec92f34762e703f6ede.png\",\"https:\\/\\/habrastorage.org\\/getpro\\/habr\\/post_images\\/062\\/15e\\/3d0\\/06215e3d045965acfc219741b48888cc.gif\",\"https:\\/\\/habrastorage.org\\/getpro\\/habr\\/post_images\\/bb0\\/713\\/67c\\/bb071367cc2b1dcc4af2b357acd9f97d.jpg\"]}","metaDescription":"Суть разработки программного обеспечения\r\n— Нужно проделать 500 отверстий в стене, так что я сконструировал автоматическую дрель. В ней используются элегантные точные шестерни для непрерывной...","mainImageUrl":null,"amp":false},"polls":[],"commentsEnabled":true,"votesEnabled":true,"status":"published","plannedPublishTime":null,"checked":null,"isEditorial":false}